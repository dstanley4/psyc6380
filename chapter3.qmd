# Chapter 3

```{r}
#| include: false
library(tidyverse)
library(usethis) # use_github_file() 
library(janitor) # clean_names() 
library(skimr) # skim()
library(apaTables)
library(apaTables)
```

## Page 40

### Expenditures vs Labour Graph

#### Activate packages

```{r}
library(usethis) # use_github_file()
library(tidyverse) # read_csv() 
library(janitor) # clean_names() 
```

#### Obtain data and save it to your computer

```{r}
#| include: false
use_github_file(repo_spec = "https://github.com/johnhoffmannVA/LinearRegression/blob/main/Nations2018.csv",
                save_as = "nations2018.csv")

nations2018 <- read_csv("nations2018.csv", show_col_types = FALSE) %>% clean_names()
```

```{r}
#| eval: false
use_github_file(repo_spec = "https://github.com/johnhoffmannVA/LinearRegression/blob/main/Nations2018.csv",
                save_as = "nations2018.csv")
```

#### Load data from your computer

```{r}
#| eval: false
nations2018 <- read_csv("nations2018.csv") %>% 
  clean_names()
```

#### Inspect data

```{r}
nations2018 %>% 
  glimpse()  
```

```{r}
#| echo: false
knitr::kable(nations2018)
```

#### Graph

```{r}
nations_plot <- ggplot(data = nations2018,
                        mapping = aes(x = perlabor,
                                      y = expend)) +
  geom_point(shape = 18) +
  geom_text(mapping = aes(label = nation),
            nudge_y = .4) +
  geom_smooth(method = "lm",
              se = FALSE,
              color = "red") +
  coord_cartesian(xlim = c(5, 65),
                  ylim = c(14, 24)) +
  scale_x_continuous(breaks = seq(5, 65, by = 10)) +
  scale_y_continuous(breaks = seq(14, 24, by = 2)) +
  labs(x = "Percent labor union",
       y = "Public expenditures",
       title = "Public Expenditures vs Percent Labor Union")

  
print(nations_plot)
```

## Pages 44 to 46

### Opioid vs Satisfaction Analysis

#### Activate packages

```{r}
library(usethis) # use_github_file()
library(tidyverse) # read_csv() 
library(janitor) # clean_names() 
```

#### Obtain data and save it to your computer

```{r}
#| include: false
use_github_file(repo_spec = "https://github.com/johnhoffmannVA/LinearRegression/blob/main/StateData2018.csv",
                save_as = "statedata2018.csv")

statedata2018 <- read_csv("statedata2018.csv", show_col_types = FALSE) %>% clean_names()
```

```{r}
#| eval: false
use_github_file(repo_spec = "https://github.com/johnhoffmannVA/LinearRegression/blob/main/StateData2018.csv",
                save_as = "statedata2018.csv")
```

#### Load data from your computer

Clean names is essential here. It makes sure all column names are lower case. They are not all lower case in the original data file.

```{r}
#| eval: false
statedata2018 <- read_csv("statedata2018.csv") %>% 
  clean_names()
```

#### Inspect data

There are so many column names in this data set that we do the glimpse a bit differently. That is, we sort the order of the columns alphabetically prior to doing the glimpse(). It affects only the display of the column names - not the structure of the data.

```{r}
statedata2018 %>% 
  select(sort(names(statedata2018))) %>%
  glimpse()  
```

#### Graph

```{r}
state_plot <- ggplot(data = statedata2018,
                     mapping = aes(x = life_satis,
                                   y = opioid_od_death_rate)) +
  geom_point(shape = 1) +
  geom_text(mapping = aes(label = state),
            nudge_y = 1,
            size = 2) +
  geom_smooth(method = "lm",
              se = FALSE,
              color = "red") +
  coord_cartesian(xlim = c(49, 55),
                  ylim = c(0, 50)) +
  scale_x_continuous(breaks = seq(49, 55, by = 1)) +
  scale_y_continuous(breaks = seq(10, 50, by = 10)) +
  labs(x = "Average Life Satisfaction",
       y = "Opioid overdose deaths per 100,000",
       title = "Opioid Deaths vs Life Satisfaction") +
  theme_light()

print(state_plot)
```

#### Analysis using summary()

```{r}
lrm3_1 <- lm(opioid_od_death_rate ~ life_satis,
             data = statedata2018)

summary(lrm3_1)
confint(lrm3_1)
```

#### Analysis apa.reg.table()

Using apaTables to display the regression results is probably a better approach. It's one step and combines everything into one table. But summary() approach does give additional information (e.g., adjusted $R^2)$) - so it's good to be familiar with both approaches.

```{r}
#| eval: false
lrm3_1 <- lm(opioid_od_death_rate ~ life_satis,
             data = statedata2018)

library(apaTables)
apa.reg.table(lrm3_1)

```

```{r}
#| echo: false
lrm3_1 <- lm(opioid_od_death_rate ~ life_satis,
             data = statedata2018)

library(apaTables)
knitr::kable(apa.reg.table(lrm3_1)$latex.body)
```

## Pages 49 to 50

### Fitted values

When you look at the graph with life_satis on the x-axis and opioid_od_death_rate on the y-axis you see a regression line. The points that fall on this line are predicted scores for opioid_od_death_rate based on life_satis. Alternatively, we might call these **fitted** values for opioid_od_death_rate based on life_satis. We can obtained a predicted score (i.e., fitted score) for each x-axis value using augment() command fromm the broom package. When you inspect the output below only pay attention to the opioid_od_death_rate, life_satis, and .fitted columns.  The column pioid_od_death_rate is the measured opiod overdose death rate, the column life_satis is the measured life satisfaction, the column .fitted is the predicted opiod overdose death rate for a given life_satis value.

```{r}
lrm3_1 <- lm(opioid_od_death_rate ~ life_satis,
             data = statedata2018)

library(broom)
lrm3_1 %>%
  augment()
```


### Fitted values and percentiles

See previous section for loading the data.

We want to predict opioid overdose at the 25th, 50th, and 75th percentiles for life satisfaction. So we obtain the life satisfaction values corresponding to these percentiles below.

```{r}
statedata2018 %>%
  select(life_satis) %>%
  skim()
```

From the above skim() output we extract the percentile information and put it in a table that's easy to follow below. We can see the life_satis value for each percentile in this table.

| Percentile | life_satis value |
|------------|------------------|
| 25th       | 51.1             |
| 50th       | 51.6             |
| 75th       | 52.3             |

### Calculate fitted values

```{r}
lrm3_1 <- lm(opioid_od_death_rate ~ life_satis,
             data = statedata2018)


# we need to use the EXACT name from the original data set
life_satis <- c(51.1, 51.6, 52.3)

fit_for_values = data.frame(life_satis)

predict(lrm3_1, fit_for_values)
  
```

The values above are the predicted values for opioid_od_death_rate. We put everything in the table below for clarity. The predicted opioid_od_death_rate value provides a corresponding point on the regression line. That is, all (life_satis value, predicted opioid_od_death_rate value) points fall on the regression line.

| Percentile life_satis | life_satis value | predicted opioid_od_death_rate value |
|-----------------------|--------------------------------|------------------|
| 25th                  | 51.1             | 18.30148                             |
| 50th                  | 51.6             | 16.40564                             |
| 75th                  | 52.3             | 13.75146                             |

Recall the regression formulas:

$$
\hat{y} = b_0 + b_1X
$$

In the context of our variables: $$
\widehat{opioid\_od\_death\_rate} = b_0 + b_1(life\_satis)
$$

Recall the regression output:

```{r}
#| echo: false
lrm3_1 <- lm(opioid_od_death_rate ~ life_satis,
             data = statedata2018)

library(apaTables)
knitr::kable(apa.reg.table(lrm3_1)$latex.body)
```

From this output we get the regression formula:

This formula $$
\widehat{opioid\_od\_death\_rate} = b_0 + b_1(life\_satis)
$$

Becomes: $$
\widehat{opioid\_od\_death\_rate} = 212.06 + -3.79(life\_satis)
$$

Therfore for our three points:

$$
\begin{aligned}
18.30148 &= 212.06 + -3.79(51.1)\\
16.40564 &= 212.06 + -3.79(51.6)\\
13.75146 &= 212.06 + -3.79(52.3)\\
\end{aligned}
$$

## Chapter Exercises

### Activate packages

```{r}
library(usethis) # use_github_file()
library(tidyverse) # read_csv() 
library(janitor) # clean_names() 
```

### Obtain data and save it to your computer

```{r}
#| include: false
use_github_file(repo_spec = "https://github.com/johnhoffmannVA/LinearRegression/blob/main/HighSchool.csv",
                save_as = "highschool.csv")

highschool <- read_csv("highschool.csv", show_col_types = FALSE) %>% clean_names()
```

```{r}
#| eval: false
use_github_file(repo_spec = "https://github.com/johnhoffmannVA/LinearRegression/blob/main/HighSchool.csv",
                save_as = "highschool.csv")
```

### Load data from your computer

```{r}
#| eval: false
highschool <- read_csv("highschool.csv") %>% 
  clean_names()
```

### Inspect data

```{r}
highschool %>% 
  glimpse()  
```
